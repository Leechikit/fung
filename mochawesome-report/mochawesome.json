{
  "stats": {
    "suites": 2,
    "tests": 9,
    "passes": 9,
    "pending": 0,
    "failures": 0,
    "start": "2018-03-29T09:25:02.004Z",
    "end": "2018-03-29T09:25:02.063Z",
    "duration": 59,
    "testsRegistered": 9,
    "passPercent": 100,
    "pendingPercent": 0,
    "other": 0,
    "hasOther": false,
    "skipped": 0,
    "hasSkipped": false,
    "passPercentClass": "success",
    "pendingPercentClass": "danger"
  },
  "suites": {
    "uuid": "86858864-56e8-430a-a0f6-03495b0d27dd",
    "title": "",
    "fullFile": "",
    "file": "",
    "beforeHooks": [],
    "afterHooks": [],
    "tests": [],
    "suites": [
      {
        "uuid": "b2299d80-517b-4ce2-b07e-2e9b751f6ab1",
        "title": "test format content function",
        "fullFile": "E:\\Github\\fung\\test\\format-content.test.js",
        "file": "\\test\\format-content.test.js",
        "beforeHooks": [],
        "afterHooks": [],
        "tests": [
          {
            "title": "normal situation",
            "fullTitle": "test format content function normal situation",
            "timedOut": false,
            "duration": 15,
            "state": "passed",
            "speed": "fast",
            "pass": true,
            "fail": false,
            "pending": false,
            "code": "formatContent(content).then(result => {\n    expect(result.prompts).to.be.an('array');\n    expect(result.prompts).to.deep.include({\n        message: '请输入项目名：',\n        name: 'project',\n        type: 'input'\n    });\n});",
            "err": {},
            "isRoot": false,
            "uuid": "7506a889-99b1-4535-b9ea-8a91025d9235",
            "isHook": false,
            "skipped": false
          },
          {
            "title": "choices situation",
            "fullTitle": "test format content function choices situation",
            "timedOut": false,
            "duration": 11,
            "state": "passed",
            "speed": "fast",
            "pass": true,
            "fail": false,
            "pending": false,
            "code": "formatContent(content).then(result => {\n    expect(result.prompts).to.be.an('array');\n    expect(result.prompts).to.deep.include({\n        name: 'system',\n        type: \"list\",\n        message: \"请选择项目类型：\",\n        choices: [\n            {\n                name: \"mobile\",\n                value: \"mobile\"\n            },\n            {\n                name: \"pc\",\n                value: \"pc\"\n            }\n        ]\n    });\n});",
            "err": {},
            "isRoot": false,
            "uuid": "2522f481-d9c1-4721-b47d-9820ff960f5b",
            "isHook": false,
            "skipped": false
          }
        ],
        "suites": [],
        "passes": [
          "7506a889-99b1-4535-b9ea-8a91025d9235",
          "2522f481-d9c1-4721-b47d-9820ff960f5b"
        ],
        "failures": [],
        "pending": [],
        "skipped": [],
        "duration": 26,
        "root": false,
        "rootEmpty": false,
        "_timeout": 2000
      },
      {
        "uuid": "5f530c24-6432-4f3b-a00f-b5f88575c4ef",
        "title": "test replace function",
        "fullFile": "E:\\Github\\fung\\test\\replace.test.js",
        "file": "\\test\\replace.test.js",
        "beforeHooks": [],
        "afterHooks": [],
        "tests": [
          {
            "title": "normal situation",
            "fullTitle": "test replace function normal situation",
            "timedOut": false,
            "duration": 3,
            "state": "passed",
            "speed": "fast",
            "pass": true,
            "fail": false,
            "pending": false,
            "code": "const template = '<div>{{apple}}</div>';\nexpect(replace(template, config)).to.be.equal('<div>1</div>');",
            "err": {},
            "isRoot": false,
            "uuid": "52a00ef2-44dd-4827-9c3e-18647876ef6b",
            "isHook": false,
            "skipped": false
          },
          {
            "title": "multiple different replace situation",
            "fullTitle": "test replace function multiple different replace situation",
            "timedOut": false,
            "duration": 0,
            "state": "passed",
            "speed": "fast",
            "pass": true,
            "fail": false,
            "pending": false,
            "code": "const template = \n`<div>{{apple}}</div>\n<div>{{orange}}</div>`;\nexpect(replace(template, config)).to.be.equal(\n`<div>1</div>\n<div>2</div>`);",
            "err": {},
            "isRoot": false,
            "uuid": "7d51f6aa-195a-401f-8fef-31834b24994a",
            "isHook": false,
            "skipped": false
          },
          {
            "title": "multiple same replace situation",
            "fullTitle": "test replace function multiple same replace situation",
            "timedOut": false,
            "duration": 0,
            "state": "passed",
            "speed": "fast",
            "pass": true,
            "fail": false,
            "pending": false,
            "code": "const template = \n`<div>{{apple}}</div>\n<div>{{apple}}{{apple}}</div>\n<div>{{apple}}{{apple}}{{apple}}</div>`;\nexpect(replace(template, config)).to.be.equal(\n`<div>1</div>\n<div>11</div>\n<div>111</div>`);",
            "err": {},
            "isRoot": false,
            "uuid": "c824e316-6ad6-49ce-a8ce-e004265124ab",
            "isHook": false,
            "skipped": false
          },
          {
            "title": "not standard template situation",
            "fullTitle": "test replace function not standard template situation",
            "timedOut": false,
            "duration": 0,
            "state": "passed",
            "speed": "fast",
            "pass": true,
            "fail": false,
            "pending": false,
            "code": "const template = '<div>{{ apple      }}</div>';\nexpect(replace(template, config)).to.be.equal('<div>1</div>');",
            "err": {},
            "isRoot": false,
            "uuid": "616c502f-1ba0-4996-b1cd-bd38e331e329",
            "isHook": false,
            "skipped": false
          },
          {
            "title": "template is not match with config",
            "fullTitle": "test replace function template is not match with config",
            "timedOut": false,
            "duration": 0,
            "state": "passed",
            "speed": "fast",
            "pass": true,
            "fail": false,
            "pending": false,
            "code": "const template = '<div>{{sheep}}</div>';\nexpect(replace(template, config)).to.be.equal('<div>{{sheep}}</div>');",
            "err": {},
            "isRoot": false,
            "uuid": "be6d21cf-cd76-43cc-ba92-c421a6faa452",
            "isHook": false,
            "skipped": false
          },
          {
            "title": "conditional operator",
            "fullTitle": "test replace function conditional operator",
            "timedOut": false,
            "duration": 0,
            "state": "passed",
            "speed": "fast",
            "pass": true,
            "fail": false,
            "pending": false,
            "code": "const template = '<div>{{food?apple:orange}}</div>';\nexpect(replace(template, config)).to.be.equal('<div>1</div>');",
            "err": {},
            "isRoot": false,
            "uuid": "79bc5ee6-04b0-460c-bf7a-922c364d13d8",
            "isHook": false,
            "skipped": false
          },
          {
            "title": "not standard conditional operator",
            "fullTitle": "test replace function not standard conditional operator",
            "timedOut": false,
            "duration": 1,
            "state": "passed",
            "speed": "fast",
            "pass": true,
            "fail": false,
            "pending": false,
            "code": "const template = '<div>{{food  ? apple:  orange}}</div>';\nexpect(replace(template, config)).to.be.equal('<div>1</div>');",
            "err": {},
            "isRoot": false,
            "uuid": "96c41a16-2292-4f15-ac6b-41276069c82e",
            "isHook": false,
            "skipped": false
          }
        ],
        "suites": [],
        "passes": [
          "52a00ef2-44dd-4827-9c3e-18647876ef6b",
          "7d51f6aa-195a-401f-8fef-31834b24994a",
          "c824e316-6ad6-49ce-a8ce-e004265124ab",
          "616c502f-1ba0-4996-b1cd-bd38e331e329",
          "be6d21cf-cd76-43cc-ba92-c421a6faa452",
          "79bc5ee6-04b0-460c-bf7a-922c364d13d8",
          "96c41a16-2292-4f15-ac6b-41276069c82e"
        ],
        "failures": [],
        "pending": [],
        "skipped": [],
        "duration": 4,
        "root": false,
        "rootEmpty": false,
        "_timeout": 2000
      }
    ],
    "passes": [],
    "failures": [],
    "pending": [],
    "skipped": [],
    "duration": 0,
    "root": true,
    "rootEmpty": true,
    "_timeout": 2000
  },
  "copyrightYear": 2018
}