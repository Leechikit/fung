{
  "stats": {
    "suites": 2,
    "tests": 11,
    "passes": 11,
    "pending": 0,
    "failures": 0,
    "start": "2018-03-30T09:33:56.188Z",
    "end": "2018-03-30T09:33:56.264Z",
    "duration": 76,
    "testsRegistered": 11,
    "passPercent": 100,
    "pendingPercent": 0,
    "other": 0,
    "hasOther": false,
    "skipped": 0,
    "hasSkipped": false,
    "passPercentClass": "success",
    "pendingPercentClass": "danger"
  },
  "suites": {
    "uuid": "52f17493-d53c-4ce2-834b-81b08d1831d1",
    "title": "",
    "fullFile": "",
    "file": "",
    "beforeHooks": [],
    "afterHooks": [],
    "tests": [],
    "suites": [
      {
        "uuid": "2c08b0f7-6300-4ca3-a16b-1371f78edb53",
        "title": "test format content function",
        "fullFile": "E:\\Github\\fung\\test\\format-content.test.js",
        "file": "\\test\\format-content.test.js",
        "beforeHooks": [],
        "afterHooks": [],
        "tests": [
          {
            "title": "normal situation",
            "fullTitle": "test format content function normal situation",
            "timedOut": false,
            "duration": 17,
            "state": "passed",
            "speed": "fast",
            "pass": true,
            "fail": false,
            "pending": false,
            "code": "formatContent(content).then(result => {\n    expect(result.prompts).to.be.an('array');\n    expect(result.prompts).to.deep.include({\n        message: '请输入项目名：',\n        name: 'project',\n        type: 'input'\n    });\n});",
            "err": {},
            "isRoot": false,
            "uuid": "9539746a-2730-4558-9a51-f7b78cb24a7d",
            "isHook": false,
            "skipped": false
          },
          {
            "title": "choices situation",
            "fullTitle": "test format content function choices situation",
            "timedOut": false,
            "duration": 20,
            "state": "passed",
            "speed": "fast",
            "pass": true,
            "fail": false,
            "pending": false,
            "code": "formatContent(content).then(result => {\n    expect(result.prompts).to.be.an('array');\n    expect(result.prompts).to.deep.include({\n        name: 'system',\n        type: \"list\",\n        message: \"请选择项目类型：\",\n        choices: [\n            {\n                name: \"mobile\",\n                value: \"mobile\"\n            },\n            {\n                name: \"pc\",\n                value: \"pc\"\n            }\n        ]\n    });\n});",
            "err": {},
            "isRoot": false,
            "uuid": "8cd09df1-3d06-4c40-9860-e181857135c5",
            "isHook": false,
            "skipped": false
          }
        ],
        "suites": [],
        "passes": [
          "9539746a-2730-4558-9a51-f7b78cb24a7d",
          "8cd09df1-3d06-4c40-9860-e181857135c5"
        ],
        "failures": [],
        "pending": [],
        "skipped": [],
        "duration": 37,
        "root": false,
        "rootEmpty": false,
        "_timeout": 2000
      },
      {
        "uuid": "38ea5adc-4b90-4883-b028-f603f079acd0",
        "title": "test replace function",
        "fullFile": "E:\\Github\\fung\\test\\replace.test.js",
        "file": "\\test\\replace.test.js",
        "beforeHooks": [],
        "afterHooks": [],
        "tests": [
          {
            "title": "normal situation",
            "fullTitle": "test replace function normal situation",
            "timedOut": false,
            "duration": 1,
            "state": "passed",
            "speed": "fast",
            "pass": true,
            "fail": false,
            "pending": false,
            "code": "const template = '<div>{{apple}}</div>';\nexpect(replace(template, config)).to.be.equal('<div>1</div>');",
            "err": {},
            "isRoot": false,
            "uuid": "4f2f3aae-6c67-44d4-821e-afe0744519e3",
            "isHook": false,
            "skipped": false
          },
          {
            "title": "multiple different replace situation",
            "fullTitle": "test replace function multiple different replace situation",
            "timedOut": false,
            "duration": 1,
            "state": "passed",
            "speed": "fast",
            "pass": true,
            "fail": false,
            "pending": false,
            "code": "const template = \n`<div>{{apple}}</div>\n<div>{{orange}}</div>`;\nexpect(replace(template, config)).to.be.equal(\n`<div>1</div>\n<div>2</div>`);",
            "err": {},
            "isRoot": false,
            "uuid": "38cf3f3c-89bd-4cd5-96a9-6d000477363d",
            "isHook": false,
            "skipped": false
          },
          {
            "title": "multiple same replace situation",
            "fullTitle": "test replace function multiple same replace situation",
            "timedOut": false,
            "duration": 0,
            "state": "passed",
            "speed": "fast",
            "pass": true,
            "fail": false,
            "pending": false,
            "code": "const template = \n`<div>{{apple}}</div>\n<div>{{apple}}{{apple}}</div>\n<div>{{apple}}{{apple}}{{apple}}</div>`;\nexpect(replace(template, config)).to.be.equal(\n`<div>1</div>\n<div>11</div>\n<div>111</div>`);",
            "err": {},
            "isRoot": false,
            "uuid": "71ff41b2-c01f-4ce5-a781-f16d69ffed1e",
            "isHook": false,
            "skipped": false
          },
          {
            "title": "not standard template situation",
            "fullTitle": "test replace function not standard template situation",
            "timedOut": false,
            "duration": 0,
            "state": "passed",
            "speed": "fast",
            "pass": true,
            "fail": false,
            "pending": false,
            "code": "const template = '<div>{{ apple      }}</div>';\nexpect(replace(template, config)).to.be.equal('<div>1</div>');",
            "err": {},
            "isRoot": false,
            "uuid": "8b3edc75-44e6-44f7-9913-3d4f41ae78b8",
            "isHook": false,
            "skipped": false
          },
          {
            "title": "template is not match with config",
            "fullTitle": "test replace function template is not match with config",
            "timedOut": false,
            "duration": 0,
            "state": "passed",
            "speed": "fast",
            "pass": true,
            "fail": false,
            "pending": false,
            "code": "const template = '<div>{{sheep}}</div>';\nexpect(replace(template, config)).to.be.equal('<div>{{sheep}}</div>');",
            "err": {},
            "isRoot": false,
            "uuid": "b61e2745-80dc-46ac-8519-3924a8de0840",
            "isHook": false,
            "skipped": false
          },
          {
            "title": "conditional operator",
            "fullTitle": "test replace function conditional operator",
            "timedOut": false,
            "duration": 1,
            "state": "passed",
            "speed": "fast",
            "pass": true,
            "fail": false,
            "pending": false,
            "code": "const template = '<div>{{food?\"test/\"+apple:orange}}</div>';\nexpect(replace(template, config)).to.be.equal('<div>test/1</div>');",
            "err": {},
            "isRoot": false,
            "uuid": "6e45e6d6-f0fb-4cfa-ba43-bf99dbe497fe",
            "isHook": false,
            "skipped": false
          },
          {
            "title": "Logical AND operator",
            "fullTitle": "test replace function Logical AND operator",
            "timedOut": false,
            "duration": 0,
            "state": "passed",
            "speed": "fast",
            "pass": true,
            "fail": false,
            "pending": false,
            "code": "const template = '<div>{{food && apple}}</div>';\nexpect(replace(template, config)).to.be.equal('<div>1</div>');",
            "err": {},
            "isRoot": false,
            "uuid": "809ad89e-cb86-44aa-a277-706be3d64801",
            "isHook": false,
            "skipped": false
          },
          {
            "title": "Logical OR operator",
            "fullTitle": "test replace function Logical OR operator",
            "timedOut": false,
            "duration": 0,
            "state": "passed",
            "speed": "fast",
            "pass": true,
            "fail": false,
            "pending": false,
            "code": "const template = '<div>{{food || apple}}</div>';\nexpect(replace(template, config)).to.be.equal('<div>true</div>');",
            "err": {},
            "isRoot": false,
            "uuid": "cc31d41e-217f-4b7c-bd25-5e1ba4a384f9",
            "isHook": false,
            "skipped": false
          },
          {
            "title": "Logical NOT operator",
            "fullTitle": "test replace function Logical NOT operator",
            "timedOut": false,
            "duration": 0,
            "state": "passed",
            "speed": "fast",
            "pass": true,
            "fail": false,
            "pending": false,
            "code": "const template = '<div>{{!food || orange}}</div>';\nexpect(replace(template, config)).to.be.equal('<div>2</div>');",
            "err": {},
            "isRoot": false,
            "uuid": "0a94e155-6ebb-47f7-81e4-da301d7476e3",
            "isHook": false,
            "skipped": false
          }
        ],
        "suites": [],
        "passes": [
          "4f2f3aae-6c67-44d4-821e-afe0744519e3",
          "38cf3f3c-89bd-4cd5-96a9-6d000477363d",
          "71ff41b2-c01f-4ce5-a781-f16d69ffed1e",
          "8b3edc75-44e6-44f7-9913-3d4f41ae78b8",
          "b61e2745-80dc-46ac-8519-3924a8de0840",
          "6e45e6d6-f0fb-4cfa-ba43-bf99dbe497fe",
          "809ad89e-cb86-44aa-a277-706be3d64801",
          "cc31d41e-217f-4b7c-bd25-5e1ba4a384f9",
          "0a94e155-6ebb-47f7-81e4-da301d7476e3"
        ],
        "failures": [],
        "pending": [],
        "skipped": [],
        "duration": 3,
        "root": false,
        "rootEmpty": false,
        "_timeout": 2000
      }
    ],
    "passes": [],
    "failures": [],
    "pending": [],
    "skipped": [],
    "duration": 0,
    "root": true,
    "rootEmpty": true,
    "_timeout": 2000
  },
  "copyrightYear": 2018
}