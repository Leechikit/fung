{
  "stats": {
    "suites": 2,
    "tests": 11,
    "passes": 11,
    "pending": 0,
    "failures": 0,
    "start": "2018-03-29T10:24:35.055Z",
    "end": "2018-03-29T10:24:35.136Z",
    "duration": 81,
    "testsRegistered": 11,
    "passPercent": 100,
    "pendingPercent": 0,
    "other": 0,
    "hasOther": false,
    "skipped": 0,
    "hasSkipped": false,
    "passPercentClass": "success",
    "pendingPercentClass": "danger"
  },
  "suites": {
    "uuid": "833e76b1-85dd-4df7-8064-34ce6066c0da",
    "title": "",
    "fullFile": "",
    "file": "",
    "beforeHooks": [],
    "afterHooks": [],
    "tests": [],
    "suites": [
      {
        "uuid": "ae02d5a2-d9c2-43cf-821d-a78948585eb4",
        "title": "test format content function",
        "fullFile": "E:\\Github\\fung\\test\\format-content.test.js",
        "file": "\\test\\format-content.test.js",
        "beforeHooks": [],
        "afterHooks": [],
        "tests": [
          {
            "title": "normal situation",
            "fullTitle": "test format content function normal situation",
            "timedOut": false,
            "duration": 14,
            "state": "passed",
            "speed": "fast",
            "pass": true,
            "fail": false,
            "pending": false,
            "code": "formatContent(content).then(result => {\n    expect(result.prompts).to.be.an('array');\n    expect(result.prompts).to.deep.include({\n        message: '请输入项目名：',\n        name: 'project',\n        type: 'input'\n    });\n});",
            "err": {},
            "isRoot": false,
            "uuid": "a255c2ab-94f5-4911-b65c-d598054f418b",
            "isHook": false,
            "skipped": false
          },
          {
            "title": "choices situation",
            "fullTitle": "test format content function choices situation",
            "timedOut": false,
            "duration": 15,
            "state": "passed",
            "speed": "fast",
            "pass": true,
            "fail": false,
            "pending": false,
            "code": "formatContent(content).then(result => {\n    expect(result.prompts).to.be.an('array');\n    expect(result.prompts).to.deep.include({\n        name: 'system',\n        type: \"list\",\n        message: \"请选择项目类型：\",\n        choices: [\n            {\n                name: \"mobile\",\n                value: \"mobile\"\n            },\n            {\n                name: \"pc\",\n                value: \"pc\"\n            }\n        ]\n    });\n});",
            "err": {},
            "isRoot": false,
            "uuid": "2ac57bc8-c5e9-44d5-8ed3-2420cf7716d9",
            "isHook": false,
            "skipped": false
          }
        ],
        "suites": [],
        "passes": [
          "a255c2ab-94f5-4911-b65c-d598054f418b",
          "2ac57bc8-c5e9-44d5-8ed3-2420cf7716d9"
        ],
        "failures": [],
        "pending": [],
        "skipped": [],
        "duration": 29,
        "root": false,
        "rootEmpty": false,
        "_timeout": 2000
      },
      {
        "uuid": "6da126bb-d225-430a-bdcd-23b509fe44fa",
        "title": "test replace function",
        "fullFile": "E:\\Github\\fung\\test\\replace.test.js",
        "file": "\\test\\replace.test.js",
        "beforeHooks": [],
        "afterHooks": [],
        "tests": [
          {
            "title": "normal situation",
            "fullTitle": "test replace function normal situation",
            "timedOut": false,
            "duration": 2,
            "state": "passed",
            "speed": "fast",
            "pass": true,
            "fail": false,
            "pending": false,
            "code": "const template = '<div>{{apple}}</div>';\nexpect(replace(template, config)).to.be.equal('<div>1</div>');",
            "err": {},
            "isRoot": false,
            "uuid": "cc57533f-c3b7-4cc9-9384-47f105c54247",
            "isHook": false,
            "skipped": false
          },
          {
            "title": "multiple different replace situation",
            "fullTitle": "test replace function multiple different replace situation",
            "timedOut": false,
            "duration": 1,
            "state": "passed",
            "speed": "fast",
            "pass": true,
            "fail": false,
            "pending": false,
            "code": "const template = \n`<div>{{apple}}</div>\n<div>{{orange}}</div>`;\nexpect(replace(template, config)).to.be.equal(\n`<div>1</div>\n<div>2</div>`);",
            "err": {},
            "isRoot": false,
            "uuid": "beb5fb34-bdce-43ba-b51a-1f0eb244f2c9",
            "isHook": false,
            "skipped": false
          },
          {
            "title": "multiple same replace situation",
            "fullTitle": "test replace function multiple same replace situation",
            "timedOut": false,
            "duration": 1,
            "state": "passed",
            "speed": "fast",
            "pass": true,
            "fail": false,
            "pending": false,
            "code": "const template = \n`<div>{{apple}}</div>\n<div>{{apple}}{{apple}}</div>\n<div>{{apple}}{{apple}}{{apple}}</div>`;\nexpect(replace(template, config)).to.be.equal(\n`<div>1</div>\n<div>11</div>\n<div>111</div>`);",
            "err": {},
            "isRoot": false,
            "uuid": "bd49f750-feb4-4eb4-990d-54d53399c96c",
            "isHook": false,
            "skipped": false
          },
          {
            "title": "not standard template situation",
            "fullTitle": "test replace function not standard template situation",
            "timedOut": false,
            "duration": 0,
            "state": "passed",
            "speed": "fast",
            "pass": true,
            "fail": false,
            "pending": false,
            "code": "const template = '<div>{{ apple      }}</div>';\nexpect(replace(template, config)).to.be.equal('<div>1</div>');",
            "err": {},
            "isRoot": false,
            "uuid": "0def6956-64a9-45a0-bf56-9d4f40bb17d8",
            "isHook": false,
            "skipped": false
          },
          {
            "title": "template is not match with config",
            "fullTitle": "test replace function template is not match with config",
            "timedOut": false,
            "duration": 0,
            "state": "passed",
            "speed": "fast",
            "pass": true,
            "fail": false,
            "pending": false,
            "code": "const template = '<div>{{sheep}}</div>';\nexpect(replace(template, config)).to.be.equal('<div>{{sheep}}</div>');",
            "err": {},
            "isRoot": false,
            "uuid": "ad103490-a5b8-4e3a-9fbe-a05a9bcb768c",
            "isHook": false,
            "skipped": false
          },
          {
            "title": "conditional operator",
            "fullTitle": "test replace function conditional operator",
            "timedOut": false,
            "duration": 0,
            "state": "passed",
            "speed": "fast",
            "pass": true,
            "fail": false,
            "pending": false,
            "code": "const template = '<div>{{food?\"test/\"+apple:orange}}</div>';\nexpect(replace(template, config)).to.be.equal('<div>test/1</div>');",
            "err": {},
            "isRoot": false,
            "uuid": "9c8828fd-2a0c-4f91-bc30-0d3037879a5f",
            "isHook": false,
            "skipped": false
          },
          {
            "title": "Logical AND operator",
            "fullTitle": "test replace function Logical AND operator",
            "timedOut": false,
            "duration": 0,
            "state": "passed",
            "speed": "fast",
            "pass": true,
            "fail": false,
            "pending": false,
            "code": "const template = '<div>{{food && apple}}</div>';\nexpect(replace(template, config)).to.be.equal('<div>1</div>');",
            "err": {},
            "isRoot": false,
            "uuid": "b4ce0cdf-ef61-492a-90ec-3814f85c38d1",
            "isHook": false,
            "skipped": false
          },
          {
            "title": "Logical OR operator",
            "fullTitle": "test replace function Logical OR operator",
            "timedOut": false,
            "duration": 1,
            "state": "passed",
            "speed": "fast",
            "pass": true,
            "fail": false,
            "pending": false,
            "code": "const template = '<div>{{food || apple}}</div>';\nexpect(replace(template, config)).to.be.equal('<div>true</div>');",
            "err": {},
            "isRoot": false,
            "uuid": "3988420c-dad6-41ac-8ff2-e746223e0ded",
            "isHook": false,
            "skipped": false
          },
          {
            "title": "Logical NOT operator",
            "fullTitle": "test replace function Logical NOT operator",
            "timedOut": false,
            "duration": 0,
            "state": "passed",
            "speed": "fast",
            "pass": true,
            "fail": false,
            "pending": false,
            "code": "const template = '<div>{{!food || orange}}</div>';\nexpect(replace(template, config)).to.be.equal('<div>2</div>');",
            "err": {},
            "isRoot": false,
            "uuid": "98d9d9f9-bfe2-4c81-b50e-461f68d953f9",
            "isHook": false,
            "skipped": false
          }
        ],
        "suites": [],
        "passes": [
          "cc57533f-c3b7-4cc9-9384-47f105c54247",
          "beb5fb34-bdce-43ba-b51a-1f0eb244f2c9",
          "bd49f750-feb4-4eb4-990d-54d53399c96c",
          "0def6956-64a9-45a0-bf56-9d4f40bb17d8",
          "ad103490-a5b8-4e3a-9fbe-a05a9bcb768c",
          "9c8828fd-2a0c-4f91-bc30-0d3037879a5f",
          "b4ce0cdf-ef61-492a-90ec-3814f85c38d1",
          "3988420c-dad6-41ac-8ff2-e746223e0ded",
          "98d9d9f9-bfe2-4c81-b50e-461f68d953f9"
        ],
        "failures": [],
        "pending": [],
        "skipped": [],
        "duration": 5,
        "root": false,
        "rootEmpty": false,
        "_timeout": 2000
      }
    ],
    "passes": [],
    "failures": [],
    "pending": [],
    "skipped": [],
    "duration": 0,
    "root": true,
    "rootEmpty": true,
    "_timeout": 2000
  },
  "copyrightYear": 2018
}