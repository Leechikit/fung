{
  "stats": {
    "suites": 2,
    "tests": 7,
    "passes": 7,
    "pending": 0,
    "failures": 0,
    "start": "2017-12-21T13:13:47.608Z",
    "end": "2017-12-21T13:13:47.637Z",
    "duration": 29,
    "testsRegistered": 7,
    "passPercent": 100,
    "pendingPercent": 0,
    "other": 0,
    "hasOther": false,
    "skipped": 0,
    "hasSkipped": false,
    "passPercentClass": "success",
    "pendingPercentClass": "danger"
  },
  "suites": {
    "uuid": "9850df4b-c5c8-46cf-8226-103068e48918",
    "title": "",
    "fullFile": "",
    "file": "",
    "beforeHooks": [],
    "afterHooks": [],
    "tests": [],
    "suites": [
      {
        "uuid": "ab894779-0a3e-48d3-87b6-0377f11a044e",
        "title": "test format content function",
        "fullFile": "E:\\Github\\fung\\test\\format-content.test.js",
        "file": "\\test\\format-content.test.js",
        "beforeHooks": [],
        "afterHooks": [],
        "tests": [
          {
            "title": "normal situation",
            "fullTitle": "test format content function normal situation",
            "timedOut": false,
            "duration": 3,
            "state": "passed",
            "speed": "fast",
            "pass": true,
            "fail": false,
            "pending": false,
            "code": "expect(formatContent(content)).to.be.an('array');\nexpect(formatContent(content)).to.deep.include({\n    message: '请输入项目名：',\n    name: 'project',\n    type: 'input'\n});",
            "err": {},
            "isRoot": false,
            "uuid": "9a122a9a-9207-4126-8f9d-d8ba6dae1eb9",
            "isHook": false,
            "skipped": false
          },
          {
            "title": "choices situation",
            "fullTitle": "test format content function choices situation",
            "timedOut": false,
            "duration": 0,
            "state": "passed",
            "speed": "fast",
            "pass": true,
            "fail": false,
            "pending": false,
            "code": "expect(formatContent(content)).to.be.an('array');\nexpect(formatContent(content)).to.deep.include({\n    name: 'system',\n    type: \"list\",\n    message: \"请选择项目类型：\",\n    choices: [\n        {\n            name: \"mobile\",\n            value: \"mobile\"\n        },\n        {\n            name: \"pc\",\n            value: \"pc\"\n        }\n    ]\n});",
            "err": {},
            "isRoot": false,
            "uuid": "79b47e97-03a6-4cc2-acdc-b96928df8d04",
            "isHook": false,
            "skipped": false
          }
        ],
        "suites": [],
        "passes": [
          "9a122a9a-9207-4126-8f9d-d8ba6dae1eb9",
          "79b47e97-03a6-4cc2-acdc-b96928df8d04"
        ],
        "failures": [],
        "pending": [],
        "skipped": [],
        "duration": 3,
        "root": false,
        "rootEmpty": false,
        "_timeout": 2000
      },
      {
        "uuid": "16a1da0c-8380-4593-ba02-75f5304195c2",
        "title": "test replace function",
        "fullFile": "E:\\Github\\fung\\test\\replace.test.js",
        "file": "\\test\\replace.test.js",
        "beforeHooks": [],
        "afterHooks": [],
        "tests": [
          {
            "title": "normal situation",
            "fullTitle": "test replace function normal situation",
            "timedOut": false,
            "duration": 0,
            "state": "passed",
            "speed": "fast",
            "pass": true,
            "fail": false,
            "pending": false,
            "code": "const template = '<div>{{apple}}</div>';\nexpect(replace(template, config)).to.be.equal('<div>1</div>');",
            "err": {},
            "isRoot": false,
            "uuid": "cee83335-9bf9-44a8-8f46-97e1d9486262",
            "isHook": false,
            "skipped": false
          },
          {
            "title": "multiple different replace situation",
            "fullTitle": "test replace function multiple different replace situation",
            "timedOut": false,
            "duration": 1,
            "state": "passed",
            "speed": "fast",
            "pass": true,
            "fail": false,
            "pending": false,
            "code": "const template = \n`<div>{{apple}}</div>\n<div>{{orange}}</div>`;\nexpect(replace(template, config)).to.be.equal(\n`<div>1</div>\n<div>2</div>`);",
            "err": {},
            "isRoot": false,
            "uuid": "78e9b57b-060d-4ebb-a435-5cfa87ef4244",
            "isHook": false,
            "skipped": false
          },
          {
            "title": "multiple same replace situation",
            "fullTitle": "test replace function multiple same replace situation",
            "timedOut": false,
            "duration": 2,
            "state": "passed",
            "speed": "fast",
            "pass": true,
            "fail": false,
            "pending": false,
            "code": "const template = \n`<div>{{apple}}</div>\n<div>{{apple}}{{apple}}</div>\n<div>{{apple}}{{apple}}{{apple}}</div>`;\nexpect(replace(template, config)).to.be.equal(\n`<div>1</div>\n<div>11</div>\n<div>111</div>`);",
            "err": {},
            "isRoot": false,
            "uuid": "ce6b37c3-0e4e-4a09-b392-803fc4712d79",
            "isHook": false,
            "skipped": false
          },
          {
            "title": "not standard template situation",
            "fullTitle": "test replace function not standard template situation",
            "timedOut": false,
            "duration": 0,
            "state": "passed",
            "speed": "fast",
            "pass": true,
            "fail": false,
            "pending": false,
            "code": "const template = '<div>{{ apple      }}</div>';\nexpect(replace(template, config)).to.be.equal('<div>1</div>');",
            "err": {},
            "isRoot": false,
            "uuid": "5956cb19-ffe0-4026-8ca0-b2bb23aeff9d",
            "isHook": false,
            "skipped": false
          },
          {
            "title": "template is not match with config",
            "fullTitle": "test replace function template is not match with config",
            "timedOut": false,
            "duration": 0,
            "state": "passed",
            "speed": "fast",
            "pass": true,
            "fail": false,
            "pending": false,
            "code": "const template = '<div>{{sheep}}</div>';\nexpect(replace(template, config)).to.be.equal('<div>{{sheep}}</div>');",
            "err": {},
            "isRoot": false,
            "uuid": "174a3378-fd10-40f3-9179-b88032cc4689",
            "isHook": false,
            "skipped": false
          }
        ],
        "suites": [],
        "passes": [
          "cee83335-9bf9-44a8-8f46-97e1d9486262",
          "78e9b57b-060d-4ebb-a435-5cfa87ef4244",
          "ce6b37c3-0e4e-4a09-b392-803fc4712d79",
          "5956cb19-ffe0-4026-8ca0-b2bb23aeff9d",
          "174a3378-fd10-40f3-9179-b88032cc4689"
        ],
        "failures": [],
        "pending": [],
        "skipped": [],
        "duration": 3,
        "root": false,
        "rootEmpty": false,
        "_timeout": 2000
      }
    ],
    "passes": [],
    "failures": [],
    "pending": [],
    "skipped": [],
    "duration": 0,
    "root": true,
    "rootEmpty": true,
    "_timeout": 2000
  },
  "copyrightYear": 2017
}