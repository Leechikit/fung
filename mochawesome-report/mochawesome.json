{
  "stats": {
    "suites": 2,
    "tests": 8,
    "passes": 8,
    "pending": 0,
    "failures": 0,
    "start": "2018-04-09T11:08:56.958Z",
    "end": "2018-04-09T11:08:57.028Z",
    "duration": 70,
    "testsRegistered": 8,
    "passPercent": 100,
    "pendingPercent": 0,
    "other": 0,
    "hasOther": false,
    "skipped": 0,
    "hasSkipped": false,
    "passPercentClass": "success",
    "pendingPercentClass": "danger"
  },
  "suites": {
    "uuid": "2c3d9baf-cf23-4b68-837a-85bee163f847",
    "title": "",
    "fullFile": "",
    "file": "",
    "beforeHooks": [],
    "afterHooks": [],
    "tests": [],
    "suites": [
      {
        "uuid": "d6867482-fcea-47a6-b5ec-6d64394b17fc",
        "title": "test format content function",
        "fullFile": "E:\\Github\\fung\\test\\format-content.test.js",
        "file": "\\test\\format-content.test.js",
        "beforeHooks": [],
        "afterHooks": [],
        "tests": [
          {
            "title": "normal situation",
            "fullTitle": "test format content function normal situation",
            "timedOut": false,
            "duration": 13,
            "state": "passed",
            "speed": "fast",
            "pass": true,
            "fail": false,
            "pending": false,
            "code": "formatContent(content).then(result => {\n    expect(result.prompts).to.be.an('array');\n    expect(result.prompts).to.deep.include({\n        message: '请输入项目名：',\n        name: 'project',\n        type: 'input'\n    });\n});",
            "err": {},
            "isRoot": false,
            "uuid": "e363d0e6-3f95-411d-bbab-50eb7f2bca5b",
            "isHook": false,
            "skipped": false
          },
          {
            "title": "choices situation",
            "fullTitle": "test format content function choices situation",
            "timedOut": false,
            "duration": 10,
            "state": "passed",
            "speed": "fast",
            "pass": true,
            "fail": false,
            "pending": false,
            "code": "formatContent(content).then(result => {\n    expect(result.prompts).to.be.an('array');\n    expect(result.prompts).to.deep.include({\n        name: 'system',\n        type: \"list\",\n        message: \"请选择项目类型：\",\n        choices: [\n            {\n                name: \"mobile\",\n                value: \"mobile\"\n            },\n            {\n                name: \"pc\",\n                value: \"pc\"\n            }\n        ]\n    });\n});",
            "err": {},
            "isRoot": false,
            "uuid": "cf8f4cb6-2769-45a8-b36d-de84c3dd22b0",
            "isHook": false,
            "skipped": false
          }
        ],
        "suites": [],
        "passes": [
          "e363d0e6-3f95-411d-bbab-50eb7f2bca5b",
          "cf8f4cb6-2769-45a8-b36d-de84c3dd22b0"
        ],
        "failures": [],
        "pending": [],
        "skipped": [],
        "duration": 23,
        "root": false,
        "rootEmpty": false,
        "_timeout": 2000
      },
      {
        "uuid": "b007e73b-27ab-42aa-8ff7-bff1ff2b64c0",
        "title": "test replace function",
        "fullFile": "E:\\Github\\fung\\test\\replace.test.js",
        "file": "\\test\\replace.test.js",
        "beforeHooks": [],
        "afterHooks": [],
        "tests": [
          {
            "title": "normal situation",
            "fullTitle": "test replace function normal situation",
            "timedOut": false,
            "duration": 10,
            "state": "passed",
            "speed": "fast",
            "pass": true,
            "fail": false,
            "pending": false,
            "code": "const template = '<div>{{apple}}</div>';\nexpect(replace(template, config)).to.be.equal('<div>1</div>');",
            "err": {},
            "isRoot": false,
            "uuid": "fc817d02-13d1-4595-b58c-d17bd15bc9bd",
            "isHook": false,
            "skipped": false
          },
          {
            "title": "multiple different replace situation",
            "fullTitle": "test replace function multiple different replace situation",
            "timedOut": false,
            "duration": 4,
            "state": "passed",
            "speed": "fast",
            "pass": true,
            "fail": false,
            "pending": false,
            "code": "const template = \n`<div>{{apple}}</div>\n<div>{{orange}}</div>`;\nexpect(replace(template, config)).to.be.equal(\n`<div>1</div>\n<div>2</div>`);",
            "err": {},
            "isRoot": false,
            "uuid": "a3e1d1fd-e656-4395-85f2-86b17c59d0a0",
            "isHook": false,
            "skipped": false
          },
          {
            "title": "multiple same replace situation",
            "fullTitle": "test replace function multiple same replace situation",
            "timedOut": false,
            "duration": 2,
            "state": "passed",
            "speed": "fast",
            "pass": true,
            "fail": false,
            "pending": false,
            "code": "const template = \n`<div>{{apple}}</div>\n<div>{{apple}}{{apple}}</div>\n<div>{{apple}}{{apple}}{{apple}}</div>`;\nexpect(replace(template, config)).to.be.equal(\n`<div>1</div>\n<div>11</div>\n<div>111</div>`);",
            "err": {},
            "isRoot": false,
            "uuid": "66a20556-f327-4522-92a6-025a60ab205c",
            "isHook": false,
            "skipped": false
          },
          {
            "title": "not standard template situation",
            "fullTitle": "test replace function not standard template situation",
            "timedOut": false,
            "duration": 3,
            "state": "passed",
            "speed": "fast",
            "pass": true,
            "fail": false,
            "pending": false,
            "code": "const template = '<div>{{ apple      }}</div>';\nexpect(replace(template, config)).to.be.equal('<div>1</div>');",
            "err": {},
            "isRoot": false,
            "uuid": "b667f592-5733-47c6-a495-2dcaac23c916",
            "isHook": false,
            "skipped": false
          },
          {
            "title": "template is not match with config",
            "fullTitle": "test replace function template is not match with config",
            "timedOut": false,
            "duration": 1,
            "state": "passed",
            "speed": "fast",
            "pass": true,
            "fail": false,
            "pending": false,
            "code": "const template = '<div>{{sheep}}</div>';\nexpect(replace(template, config)).to.be.equal('<div></div>');",
            "err": {},
            "isRoot": false,
            "uuid": "64ca03f1-0dcc-4988-8cdd-6a6173b3ebfa",
            "isHook": false,
            "skipped": false
          },
          {
            "title": "conditional operator",
            "fullTitle": "test replace function conditional operator",
            "timedOut": false,
            "duration": 2,
            "state": "passed",
            "speed": "fast",
            "pass": true,
            "fail": false,
            "pending": false,
            "code": "const template = `<div>{{#food}}1111{{else}}2222{{/food}}</div>`;\nexpect(replace(template, config)).to.be.equal('<div>1111</div>');",
            "err": {},
            "isRoot": false,
            "uuid": "0f97ba25-bf24-4c10-b0fc-04bdd8504794",
            "isHook": false,
            "skipped": false
          }
        ],
        "suites": [],
        "passes": [
          "fc817d02-13d1-4595-b58c-d17bd15bc9bd",
          "a3e1d1fd-e656-4395-85f2-86b17c59d0a0",
          "66a20556-f327-4522-92a6-025a60ab205c",
          "b667f592-5733-47c6-a495-2dcaac23c916",
          "64ca03f1-0dcc-4988-8cdd-6a6173b3ebfa",
          "0f97ba25-bf24-4c10-b0fc-04bdd8504794"
        ],
        "failures": [],
        "pending": [],
        "skipped": [],
        "duration": 22,
        "root": false,
        "rootEmpty": false,
        "_timeout": 2000
      }
    ],
    "passes": [],
    "failures": [],
    "pending": [],
    "skipped": [],
    "duration": 0,
    "root": true,
    "rootEmpty": true,
    "_timeout": 2000
  },
  "copyrightYear": 2018
}