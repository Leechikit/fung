{
  "stats": {
    "suites": 2,
    "tests": 7,
    "passes": 7,
    "pending": 0,
    "failures": 0,
    "start": "2018-02-28T07:29:05.847Z",
    "end": "2018-02-28T07:29:06.320Z",
    "duration": 473,
    "testsRegistered": 7,
    "passPercent": 100,
    "pendingPercent": 0,
    "other": 0,
    "hasOther": false,
    "skipped": 0,
    "hasSkipped": false,
    "passPercentClass": "success",
    "pendingPercentClass": "danger"
  },
  "suites": {
    "uuid": "f17e2230-d5e5-4258-b535-fdf0545a76a7",
    "title": "",
    "fullFile": "",
    "file": "",
    "beforeHooks": [],
    "afterHooks": [],
    "tests": [],
    "suites": [
      {
        "uuid": "881fa760-7358-4b30-aaef-477e1d051853",
        "title": "test format content function",
        "fullFile": "E:\\Github\\fung\\test\\format-content.test.js",
        "file": "\\test\\format-content.test.js",
        "beforeHooks": [],
        "afterHooks": [],
        "tests": [
          {
            "title": "normal situation",
            "fullTitle": "test format content function normal situation",
            "timedOut": false,
            "duration": 227,
            "state": "passed",
            "speed": "slow",
            "pass": true,
            "fail": false,
            "pending": false,
            "code": "const result = await formatContent(content);\nexpect(result.prompts).to.be.an('array');\nexpect(result.prompts).to.deep.include({\n    message: '请输入项目名：',\n    name: 'project',\n    type: 'input'\n});",
            "err": {},
            "isRoot": false,
            "uuid": "6cef420f-9fa5-4a95-9259-d586a17622ae",
            "isHook": false,
            "skipped": false
          },
          {
            "title": "choices situation",
            "fullTitle": "test format content function choices situation",
            "timedOut": false,
            "duration": 228,
            "state": "passed",
            "speed": "slow",
            "pass": true,
            "fail": false,
            "pending": false,
            "code": "const result = await formatContent(content);\nexpect(result.prompts).to.be.an('array');\nexpect(result.prompts).to.deep.include({\n    name: 'system',\n    type: \"list\",\n    message: \"请选择项目类型：\",\n    choices: [\n        {\n            name: \"mobile\",\n            value: \"mobile\"\n        },\n        {\n            name: \"pc\",\n            value: \"pc\"\n        }\n    ]\n});",
            "err": {},
            "isRoot": false,
            "uuid": "5f0843fb-980e-4219-864a-99bc76756b39",
            "isHook": false,
            "skipped": false
          }
        ],
        "suites": [],
        "passes": [
          "6cef420f-9fa5-4a95-9259-d586a17622ae",
          "5f0843fb-980e-4219-864a-99bc76756b39"
        ],
        "failures": [],
        "pending": [],
        "skipped": [],
        "duration": 455,
        "root": false,
        "rootEmpty": false,
        "_timeout": 2000
      },
      {
        "uuid": "89d6286c-b723-4d80-b282-58c646ffdb81",
        "title": "test replace function",
        "fullFile": "E:\\Github\\fung\\test\\replace.test.js",
        "file": "\\test\\replace.test.js",
        "beforeHooks": [],
        "afterHooks": [],
        "tests": [
          {
            "title": "normal situation",
            "fullTitle": "test replace function normal situation",
            "timedOut": false,
            "duration": 0,
            "state": "passed",
            "speed": "fast",
            "pass": true,
            "fail": false,
            "pending": false,
            "code": "const template = '<div>{{apple}}</div>';\nexpect(replace(template, config)).to.be.equal('<div>1</div>');",
            "err": {},
            "isRoot": false,
            "uuid": "70920210-615e-4381-bf87-bc4729a39b54",
            "isHook": false,
            "skipped": false
          },
          {
            "title": "multiple different replace situation",
            "fullTitle": "test replace function multiple different replace situation",
            "timedOut": false,
            "duration": 0,
            "state": "passed",
            "speed": "fast",
            "pass": true,
            "fail": false,
            "pending": false,
            "code": "const template = \n`<div>{{apple}}</div>\n<div>{{orange}}</div>`;\nexpect(replace(template, config)).to.be.equal(\n`<div>1</div>\n<div>2</div>`);",
            "err": {},
            "isRoot": false,
            "uuid": "3b7d2834-a7ca-41a8-9c83-fc11c19c7e6b",
            "isHook": false,
            "skipped": false
          },
          {
            "title": "multiple same replace situation",
            "fullTitle": "test replace function multiple same replace situation",
            "timedOut": false,
            "duration": 0,
            "state": "passed",
            "speed": "fast",
            "pass": true,
            "fail": false,
            "pending": false,
            "code": "const template = \n`<div>{{apple}}</div>\n<div>{{apple}}{{apple}}</div>\n<div>{{apple}}{{apple}}{{apple}}</div>`;\nexpect(replace(template, config)).to.be.equal(\n`<div>1</div>\n<div>11</div>\n<div>111</div>`);",
            "err": {},
            "isRoot": false,
            "uuid": "820cd8ab-5ae6-43b8-980c-6ec65acf78a5",
            "isHook": false,
            "skipped": false
          },
          {
            "title": "not standard template situation",
            "fullTitle": "test replace function not standard template situation",
            "timedOut": false,
            "duration": 0,
            "state": "passed",
            "speed": "fast",
            "pass": true,
            "fail": false,
            "pending": false,
            "code": "const template = '<div>{{ apple      }}</div>';\nexpect(replace(template, config)).to.be.equal('<div>1</div>');",
            "err": {},
            "isRoot": false,
            "uuid": "fc53064a-6807-4310-99d4-134c1e6b1800",
            "isHook": false,
            "skipped": false
          },
          {
            "title": "template is not match with config",
            "fullTitle": "test replace function template is not match with config",
            "timedOut": false,
            "duration": 0,
            "state": "passed",
            "speed": "fast",
            "pass": true,
            "fail": false,
            "pending": false,
            "code": "const template = '<div>{{sheep}}</div>';\nexpect(replace(template, config)).to.be.equal('<div>{{sheep}}</div>');",
            "err": {},
            "isRoot": false,
            "uuid": "855899a0-31a3-42f0-bcf1-5a63c368892e",
            "isHook": false,
            "skipped": false
          }
        ],
        "suites": [],
        "passes": [
          "70920210-615e-4381-bf87-bc4729a39b54",
          "3b7d2834-a7ca-41a8-9c83-fc11c19c7e6b",
          "820cd8ab-5ae6-43b8-980c-6ec65acf78a5",
          "fc53064a-6807-4310-99d4-134c1e6b1800",
          "855899a0-31a3-42f0-bcf1-5a63c368892e"
        ],
        "failures": [],
        "pending": [],
        "skipped": [],
        "duration": 0,
        "root": false,
        "rootEmpty": false,
        "_timeout": 2000
      }
    ],
    "passes": [],
    "failures": [],
    "pending": [],
    "skipped": [],
    "duration": 0,
    "root": true,
    "rootEmpty": true,
    "_timeout": 2000
  },
  "copyrightYear": 2018
}